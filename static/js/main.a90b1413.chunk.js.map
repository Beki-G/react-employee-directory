{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","utils/API.js","components/SortFilterBtn/SortFilterBtn.js","components/card/Card.js","components/EmployeeRoster/index.js","components/CardContainer/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Navbar","href","Promise","resolve","reject","axios","get","then","res","employees","data","results","catch","err","console","log","SortFilterBtn","offices","name","id","onChange","onChangeSort","value","onChangeFilter","map","office","index","key","Card","alt","src","picture","large","title","first","last","email","phone","location","city","state","country","timezone","offset","description","EmployeeRoster","employee","CardContainer","handleChangeFilter","handleChangeSort","filteredEmployees","length","Directory","useState","setEmployees","setOffices","setFilteredEmployees","useEffect","API","filter","self","indexOf","event","target","sorted","sort","a","b","valueA","valueB","sortByLastName","sortByFirstName","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a90b1413.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper(props){\r\n    return <main className=\"mt-4 text-center\">{props.children}</main>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <nav className=\"mx-auto pt-2 pb-2 text-4xl bg-blue-600 text-white\">\r\n            <a href=\"/\">Employee Directory</a>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import axios from \"axios\";\r\n\r\n\r\nexport default{\r\n    getEmployees: function(){\r\n        return new Promise((resolve, reject)=>{\r\n            axios\r\n                .get(\"https://randomuser.me/api/?results=15&inc=name,location,email,dob,phone,id,picture\")\r\n                .then(res =>{\r\n                    const employees = res.data.results\r\n                    resolve(employees)\r\n                })\r\n                .catch(err=>{\r\n                    console.log(\"Error in API Call\");\r\n                    reject(err);\r\n                });\r\n        });\r\n    },\r\n};","import React from \"react\";\r\n\r\n\r\n\r\nfunction SortFilterBtn(props) {\r\n    console.log(\"offices\", props.offices)\r\n    return (\r\n        <div className=\"Sort&Filter\">\r\n            <p className=\"sort-employees\">Sort the employees by: \r\n                <select name=\"sort\" id=\"sorted\" onChange={props.onChangeSort}>\r\n                <option value=\" \">------------</option>\r\n                    <option value=\"Last Name\">Last Name</option>\r\n                    <option value=\"First Name\">First Name</option>\r\n                </select>\r\n            </p>\r\n            <p className=\"filter-employees\">Filter employees by office location: \r\n                <select name=\"filter-employees\" onChange={props.onChangeFilter}>\r\n                <option value=\"All\">All</option>\r\n                {props.offices.map((office, index)=>{\r\n                return (\r\n                <option value={office} key={index}>{office}</option>\r\n                )\r\n            })}\r\n                </select>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortFilterBtn;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\" sm:w-1/2 max-w-sm rounded overflow-hidden shadow-lg m-auto\">\r\n            <img className=\"w-full object-fill\" alt=\"Employee Pic\" src={props.picture.large} />\r\n            <div className=\"font-bold text-xl\">{props.name.title} {props.name.first} {props.name.last}</div>\r\n            <p className=\"text-gray-700 text-base\"><span><strong>Employee ID:</strong></span> {props.id.value !== null? props.id.value: \"TBD - New team member\"}</p>\r\n            <p className=\"text-gray-700 text-base\"><span><strong>Employee Email:</strong></span> {props.email}</p>\r\n            <p className=\"text-gray-700 text-base\"><span><strong>Employee Phone:</strong></span> {props.phone}</p>\r\n            <p className=\"text-gray-700 text-base\"><span><strong>Office Location:</strong></span> {props.location.city}, {props.location.state}, {props.location.country}</p>\r\n            <p className=\"text-gray-700 text-base\"><span><strong>Timezone:</strong></span> {props.location.timezone.offset} {props.location.timezone.description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../card/Card\";\r\n\r\nfunction EmployeeRoster(props) {\r\n    // console.log(\"Made it to employee roster. Here are the props! \", props)\r\n    return (\r\n        <div className=\"flex flex-wrap\">\r\n            {props.employees.map((employee, index) => {\r\n                return (<Card picture={employee.picture} name={employee.name} id={employee.id} email={employee.email} phone={employee.phone} location={employee.location} key={index} />)\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default EmployeeRoster;","import React from \"react\";\r\nimport SortFilterBtn from \"../SortFilterBtn/SortFilterBtn\"\r\nimport EmployeeRoster from\"../EmployeeRoster\"\r\nimport \"./style.css\"\r\n\r\nfunction CardContainer( {handleChangeFilter, handleChangeSort, offices, filteredEmployees, employees}){\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <p>This is the start of the CardContainer</p>\r\n            <SortFilterBtn onChangeSort= { handleChangeSort } onChangeFilter={handleChangeFilter} offices={offices}/>\r\n            <EmployeeRoster className=\"align-center flex flex-wrap\" employees= { filteredEmployees.length>0? filteredEmployees: employees } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardContainer;","import React, { useEffect, useState } from \"react\";\r\nimport API from \"../utils/API\"\r\nimport CardContainer from \"../components/CardContainer\";\r\n\r\n\r\nfunction Directory() {\r\n    const [employees, setEmployees] = useState([]);\r\n    const [offices, setOffices]= useState([])\r\n    const [filteredEmployees, setFilteredEmployees] = useState([])\r\n\r\n    useEffect(() => {\r\n        loadEmployees();\r\n    }, []);\r\n\r\n    const sortByFirstName = () => {\r\n        const sorted = [...employees]\r\n\r\n        // sorted.sort((a, b)=>a.name.first - b.name.first)\r\n        \r\n        sorted.sort((a,b)=>{\r\n            var valueA = a.name.first;\r\n            var valueB = b.name.first;\r\n    \r\n            if (valueA < valueB) {\r\n                return -1;\r\n            } else if (valueA > valueB) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        })\r\n\r\n        setEmployees(sorted)\r\n        console.log(\"Sorted Object is: \", sorted)\r\n    }\r\n\r\n    const sortByLastName = () => {\r\n        const sorted = [...employees]\r\n        \r\n        sorted.sort((a,b)=>{\r\n            var valueA = a.name.last;\r\n            var valueB = b.name.last;\r\n    \r\n            if (valueA < valueB) {\r\n                return -1;\r\n            } else if (valueA > valueB) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        })\r\n\r\n        setEmployees(sorted)\r\n        console.log(\"Sorted Object is: \", sorted)\r\n    }\r\n    \r\n\r\n    function handleChangeSort(event){\r\n        if(event.target.value===\"Last Name\") {\r\n            sortByLastName();\r\n        } else  {\r\n            sortByFirstName()\r\n        } \r\n    }\r\n\r\n    function handleChangeFilter(event){\r\n        console.log(\"target value is\", event.target.value)\r\n        const city = event.target.value\r\n\r\n        const filteredEmployees= employees.filter(employee=>{ return employee.location.city === city })\r\n\r\n        console.log(\"filtered employees is: \", filteredEmployees)\r\n            \r\n        setFilteredEmployees(filteredEmployees)        \r\n    }\r\n\r\n    function loadEmployees() {\r\n        API.getEmployees()\r\n            .then(employees => {\r\n            setOffices(employees.map(employee=>\r\n                employee.location.city\r\n            ).filter((value, index,self)=> self.indexOf(value)===index))\r\n            setEmployees(employees);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CardContainer handleChangeFilter={handleChangeFilter} handleChangeSort={handleChangeSort} offices={offices} filteredEmployees={filteredEmployees} employees={employees} />\r\n        </div>\r\n    )\r\n}\r\nexport default Directory;","import React from 'react';\nimport Wrapper from \"./components/Wrapper\"\nimport Navbar from \"./components/Navbar\"\nimport Directory from './pages/Directory';\n\nfunction App() {\n  return (\n    \n    <div>\n      <Navbar />\n      <Wrapper>\n        <Directory />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}